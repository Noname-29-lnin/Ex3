var g_data = {"name":"/home/noname/Documents/project_tiny/Ex3/03_verif/DUT/Question2/tb_Question2.sv","src":"`timescale 1ns/1ps\nmodule tb_Question2();\n\nparameter SIZE_DATA = 24;\nparameter SIZE_LOP  = 5;\n\nint test_count = 0;\nint test_pass  = 0;\n\nlogic i_clk, i_rst_n;\nlogic [SIZE_DATA-1:0] i_addr;\nlogic [SIZE_DATA-1:0] i_data;\nlogic [SIZE_DATA-1:0] o_addr;  \nlogic [SIZE_LOP-1:0]  o_one_position;\nlogic                 o_zero_flag;\n\nfunction automatic logic [SIZE_LOP-1:0] Test_LOPD(\n    input logic [SIZE_DATA-1:0]     f_i_data\n);\n    logic [SIZE_DATA-1:0] t_temp;\n    int cnt_position_1;\n    begin\n        t_temp = f_i_data;\n        cnt_position_1 = 0;\n\n        if(t_temp == 0) begin\n            Test_LOPD = '0;\n        end else begin\n            while (t_temp[SIZE_DATA-1] == 0) begin\n                t_temp = t_temp << 1;\n                cnt_position_1 ++;\n            end\n            Test_LOPD = SIZE_DATA - cnt_position_1 - 1;\n        end\n    end\n\nendfunction\n\n//===================== DUT =====================//\n\nQuestion2 #(\n    .SIZE_DATA (SIZE_DATA),\n    .SIZE_LOPD  (SIZE_LOP)\n) DUT (\n    .i_data         (i_data),\n    .o_one_position (o_one_position),\n    .o_zero_flag    (o_zero_flag)\n);\n\n//===================== CLOCK =====================//\ninitial begin\n    i_clk = 0;\n    forever #5 i_clk = ~i_clk; // 10ns period = 100MHz\nend\n\n//===================== DUMP WAVE =====================//\ninitial begin\n    $dumpfile(\"tb_Question2.vcd\");\n    $dumpvars(0, tb_Question2);\nend\n//===================== TEST SEQUENCE =====================//\nint bit_pos;\ninitial begin\n    i_rst_n = 0;\n    i_addr  = '0;\n    i_data  = '0;\n\n    // Reset phase\n    #20;\n    i_rst_n = 1;\n    #10;\n\n    repeat (1) begin\n        @(posedge i_clk);\n        #1;\n        i_addr = i_addr + 1;\n        i_data  = 24'b0;\n        @(negedge i_clk);\n        #1;\n        $display(\"[TIME: %5t] [%s] i_data = %b (%d) \\t| o_one_position = %b (%d) \\t| o_zero_flag = %b\", $time, \"Zero\", i_data, i_data, o_one_position, o_one_position, o_zero_flag);\n        $display(\"=> %4s: Expect: %8h, DUT: %8h \", (Test_LOPD(i_data) == o_one_position) ? \"PASS\" : \"FAIL\", o_one_position, Test_LOPD(i_data));\n        test_count = test_count + 1;\n        test_pass  = (Test_LOPD(i_data) == o_one_position) ? test_pass + 1 : test_pass;\n    end\n\n    bit_pos = 1;\n    repeat (24) begin\n        @(posedge i_clk);\n        #1;\n        i_addr = i_addr + 1;\n        i_data  = bit_pos;\n        @(negedge i_clk);\n        #1;\n        $display(\"[TIME: %5t] [%s] i_data = %b (%d) \\t| o_one_position = %b (%d) \\t| o_zero_flag = %b\", $time, \"Direcly\", i_data, i_data, o_one_position, o_one_position, o_zero_flag);\n        $display(\"=> %4s: Expect: %8h, DUT: %8h \", (Test_LOPD(i_data) == o_one_position) ? \"PASS\" : \"FAIL\", o_one_position, Test_LOPD(i_data));\n        test_count = test_count + 1;\n        test_pass  = (Test_LOPD(i_data) == o_one_position) ? test_pass + 1 : test_pass;\n        bit_pos = bit_pos << 1'b1;\n    end\n    repeat (100) begin\n        @(posedge i_clk);\n        #1;\n        bit_pos = $urandom_range(0, SIZE_DATA-1);\n        i_data = 24'b1 << bit_pos;\n        if ($urandom_range(0, 1)) begin\n            i_data |= $urandom_range(0, (1 << SIZE_DATA) - 1);\n        end\n        #5;\n        $display(\"[TIME: %5t] [%s] i_data = %b (%d) \\t| o_one_position = %b (%d) \\t| o_zero_flag = %b\", $time, \"Random\", i_data, i_data, o_one_position, o_one_position, o_zero_flag);\n        $display(\"=> %4s: Expect: %8h, DUT: %8h \", (Test_LOPD(i_data) == o_one_position) ? \"PASS\" : \"FAIL\", o_one_position, Test_LOPD(i_data));\n        test_count = test_count + 1;\n        test_pass  = (Test_LOPD(i_data) == o_one_position) ? test_pass + 1 : test_pass;\n        i_addr = i_addr + 1;\n    end\n\n    #10;\n    $display(\"\\n================================\");\n    $display(\"==========TEST SUMMARY==========\");\n    $display(\"Total test cases: %6d    \", test_count);\n    $display(\"Passed          : %6d    \", test_pass);\n    $display(\"Failed          : %6d    \", test_count - test_pass);\n    $display(\"Pass rate       : %0.2f%%\", (test_pass * 100.0) / (test_count));\n    $display(\"================================\");\n    #100;\n\n    $finish;\nend\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);