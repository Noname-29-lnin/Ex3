var g_data = {"name":"/home/noname/Documents/project_tiny/Ex3/03_test/Question3/tb_Question3.sv","src":"`timescale 1ns/1ps\nmodule tb_Question3;\n\n    // ===== DUT signals =====\n    logic        clk;\n    logic        rst_n;\n    logic [31:0] A_tb, B_tb;\n    logic        Cin_tb;\n    logic [31:0] Sum_tb;\n    logic        Cout_tb;\n\n    // ===== Instantiate DUT =====\n    cla_32bit DUT (\n        .clk  (clk),\n        .rst_n(rst_n),\n        .A    (A_tb),\n        .B    (B_tb),\n        .Cin  (Cin_tb),\n        .Sum  (Sum_tb),\n        .Cout (Cout_tb)\n    );\n\n    // ===== Clock generation =====\n    initial clk = 0;\n    always #5 clk = ~clk;   // 10ns period\n\n    // ===== Dump waveform =====\n    initial begin\n        $dumpfile(\"tb_Question3.vcd\");\n        $dumpvars(0, tb_Question3);\n    end\n    // initial begin\n    //     $shm_open(\"waves.shm\");\n    //     $shm_probe(\"ASM\");\n    // end\n\n    // ===== Reset =====\n    initial begin\n        rst_n  = 1'b0;\n        A_tb   = '0;\n        B_tb   = '0;\n        Cin_tb = 1'b0;\n        #20;\n        rst_n = 1'b1;\n        #10;\n    end\n\n    // ===== Scoreboard =====\n    int pass_count = 0;\n    int fail_count = 0;\n\n    // ===== Task run_test =====\n    task run_test();\n\n        int idx;\n        logic [31:0] tv_a, tv_b;\n        logic        tv_cin;\n        logic [32:0] expected, got;\n\n        begin\n            $display(\"=== Start run_test (100 samples) ===\");\n            for (idx = 0; idx < 100; idx++) begin\n                // --- generate testcase ---\n                tv_a   = $urandom();\n                tv_b   = $urandom();\n                tv_cin = $urandom_range(0,1);\n                A_tb   = tv_a;\n                B_tb   = tv_b;\n                Cin_tb = tv_cin;\n                @(posedge clk);\n                @(posedge clk);\n                #1;\n                // --- compute expected ---\n                expected = {1'b0, tv_a} + {1'b0, tv_b} + tv_cin;\n                got      = {Cout_tb, Sum_tb};\n                // --- compare and display ---\n                if (got == expected) begin\n                    pass_count++;\n                    $display(\"PASS [%0d] A=0x%08h B=0x%08h Cin=%0d => {Cout,Sum}=0x%09h\",\n                             idx, tv_a, tv_b, tv_cin, got);\n                end else begin\n                    fail_count++;\n                    $display(\"FAIL [%0d] A=0x%08h B=0x%08h Cin=%0d => got=0x%09h (exp=0x%09h)\",\n                             idx, tv_a, tv_b, tv_cin, got, expected);\n                end\n            end\n\n            // --- summary ---\n            $display(\"=== Test summary ===\");\n            $display(\"Total samples = %0d\", pass_count + fail_count);\n            $display(\"PASS = %0d\", pass_count);\n            $display(\"FAIL = %0d\", fail_count);\n            $display(\"=== End run_test ===\");\n        end\n    endtask\n\n    // ===== Main process =====\n    initial begin\n        @(posedge rst_n);\n        @(posedge clk);\n        run_test();\n        $finish;\n    end\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);