var g_data = {"name":"/home/noname/Documents/project_tiny/Ex3/02_rtl/Question3/cla_32bit.sv","src":"module cla_32bit (\n    input  logic        clk,\n    input  logic        rst_n,  \n    input  logic [31:0] A,\n    input  logic [31:0] B,\n    input  logic        Cin,\n    output logic [31:0] Sum,\n    output logic        Cout\n);\n \n    logic [31:0] A_r, B_r;\n    logic        Cin_r;\n\n    always_ff @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            A_r   <= '0;\n            B_r   <= '0;\n            Cin_r <= 1'b0;\n        end else begin\n            A_r   <= A;\n            B_r   <= B;\n            Cin_r <= Cin;\n        end\n    end\n\n    logic [7:0] Pblk, Gblk;\n    logic [8:0] Cblk;   \n    logic [31:0] Sum_c;\n    logic        Cout_c;\n    \n    genvar i;\n    generate\n        assign Cblk[0] = Cin_r;\n        for (i = 0; i < 8; i++) begin : BLK\n            cla_4bit u4 (\n                .A      (A_r[4*i +: 4]),\n                .B      (B_r[4*i +: 4]),\n                .Cin    (Cblk[i]),\n                .Gblk   (Gblk[i]),\n                .Pblk   (Pblk[i]),\n                .S      (Sum_c[4*i +: 4]),\n                .Cout   ()\n            );\n            assign Cblk[i+1] = Gblk[i] | (Pblk[i] & Cblk[i]);\n        end\n    endgenerate\n\n    assign Cout_c = Cblk[8];\n\n\n    always_ff @(posedge clk or negedge rst_n) begin\n        if (!rst_n) begin\n            Sum  <= '0;\n            Cout <= 1'b0;\n        end else begin\n            Sum  <= Sum_c;\n            Cout <= Cout_c;\n        end\n    end\nendmodule\n","lang":"verilog"};
processSrcData(g_data);