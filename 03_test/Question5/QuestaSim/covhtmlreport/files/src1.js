var g_data = {"name":"/home/noname/Documents/project_tiny/Ex3/03_test/Question5/tb_Question5.sv","src":"`timescale 1ns/1ps\n\nmodule tb_Question5;\n    // ==============================\n    // DUT signals\n    // ==============================\n    logic [7:0] A, B;\n    logic S1, S0, Cin;\n    logic [7:0] F;\n    logic Cout;\n\n    // ==============================\n    // Instantiate DUT \n    // ==============================\n    alu_8bit dut (\n        .A(A), .B(B), .S1(S1), .S0(S0), .Cin(Cin),\n        .F(F), .Cout(Cout)\n    );\n\n    // ==============================\n    // Test control / statistics\n    // ==============================\n    integer total_tests;\n    integer errors;\n    integer test_count;\n    integer test_pass;\n    int unsigned seed;\n\n    // ==============================\n    // Waveform dump \n    // ==============================\n    initial begin\n        $dumpfile(\"tb_Question5.vcd\");\n        $dumpvars(0, tb_Question5);\n    end\n    // initial begin\n    //     $shm_open(\"waves.shm\");\n    //     $shm_probe(\"ASM\");\n    // end\n\n    // ==============================\n    // Reference model \n    // ==============================\n    function automatic int unsigned ref_model(\n        input logic [7:0] A_i,\n        input logic [7:0] B_i,\n        input logic S1_i,\n        input logic S0_i,\n        input logic Cin_i\n    );\n        logic [7:0] B_comp;\n        logic [7:0] Op1, Op2;\n        int unsigned sum9;\n    begin\n        B_comp = ~B_i;\n\n        // Op1 selection\n        if (S1_i && !S0_i)\n            Op1 = B_comp;\n        else\n            Op1 = A_i;\n\n        // Op2 selection per {S1,S0}\n        case ({S1_i, S0_i})\n            2'b00: Op2 = B_i;\n            2'b01: Op2 = 8'h00;\n            2'b10: Op2 = 8'h00;\n            2'b11: Op2 = B_comp;\n            default: Op2 = 8'h00;\n        endcase\n\n        sum9 = Op1 + Op2 + (Cin_i ? 1 : 0);\n        return sum9;\n    end\n    endfunction\n\n    // ==============================\n    // Task: Apply one test vector & check\n    // ==============================\n    task automatic apply_and_check(\n        input logic [7:0] tvA,\n        input logic [7:0] tvB,\n        input logic tvS1,\n        input logic tvS0,\n        input logic tvCin,\n        input string  test_label   // \"Zero\", \"Direct\", \"Random\"\n    );\n        int unsigned expected;\n        logic [7:0] expF;\n        logic expC;\n        string passfail;\n    begin\n        A = tvA;\n        B = tvB;\n        S1 = tvS1;\n        S0 = tvS0;\n        Cin = tvCin;\n        #1; // small settle delay\n\n        expected = ref_model(A, B, S1, S0, Cin);\n        expF = expected[7:0];\n        expC = expected[8];\n\n        total_tests++;\n        test_count++;\n\n        if ((F !== expF) || (Cout !== expC)) begin\n            passfail = \"FAIL\";\n            errors++;\n        end else begin\n            passfail = \"PASS\";\n            test_pass++;\n        end\n\n   \n        $display(\"[TIME: %6t] [%s] A=%02h B=%02h S1S0=%b%b Cin=%b | F=%02h Cout=%b\",\n                 $time, test_label, A, B, S1, S0, Cin, F, Cout);\n        $display(\"=> %4s: Expect: %02h (%0d), DUT: %02h (%0d)\",\n                 passfail, expF, expF, F, F);\n\n        if (passfail == \"FAIL\") begin\n            $display(\"    >>> MISMATCH: Expected F=%02h Cout=%b | Got F=%02h Cout=%b\",\n                     expF, expC, F, Cout);\n        end\n        $display(\"------------------------------------------------------------\");\n    end\n    endtask\n\n    // ==============================\n    // Task: Main run_test\n    // ==============================\n    task automatic run_test();\n        logic [7:0] edgeA [0:6];\n        logic [7:0] edgeB [0:6];\n        int idx;\n        int s1, s0, c;\n        int rctl;\n    begin\n        total_tests = 0;\n        errors = 0;\n        test_count = 0;\n        test_pass = 0;\n\n        // --- Directed edge cases ---\n        edgeA[0] = 8'h00; edgeB[0] = 8'h00;\n        edgeA[1] = 8'hFF; edgeB[1] = 8'hFF;\n        edgeA[2] = 8'hFF; edgeB[2] = 8'h01;\n        edgeA[3] = 8'h80; edgeB[3] = 8'h80;\n        edgeA[4] = 8'hAA; edgeB[4] = 8'h55;\n        edgeA[5] = 8'h55; edgeB[5] = 8'hAA;\n        edgeA[6] = 8'h0F; edgeB[6] = 8'hF0;\n\n        $display(\"\\n========== STARTING DIRECTED TESTS ==========\\n\");\n        for (idx = 0; idx <= 6; idx++) begin\n            for (s1 = 0; s1 < 2; s1++) begin\n                for (s0 = 0; s0 < 2; s0++) begin\n                    for (c = 0; c < 2; c++) begin\n                        apply_and_check(edgeA[idx], edgeB[idx], s1, s0, c, \"Direct\");\n                    end\n                end\n            end\n        end\n\n        // Special case: all zero\n        $display(\"\\n========== ZERO CASE TEST ==========\\n\");\n        apply_and_check(8'h00, 8'h00, 0, 0, 0, \"Zero\");\n\n        // Randomized tests\n        $display(\"\\n========== STARTING RANDOM TESTS ==========\\n\");\n        seed = 32'hCAFEBABE;\n        while (total_tests < 100) begin\n            A = $urandom(seed) & 8'hFF;\n            B = $urandom(seed + 1) & 8'hFF;\n            rctl = $urandom(seed + 2) % 8;\n            S1 = (rctl >> 2) & 1;\n            S0 = (rctl >> 1) & 1;\n            Cin = rctl & 1;\n            #1;\n            apply_and_check(A, B, S1, S0, Cin, \"Random\");\n            seed = seed + 12345;\n        end\n    end\n    endtask\n\n    // ==============================\n    // Test runner & summary\n    // ==============================\n    initial begin\n        real pass_rate;\n\n        $display(\"=== TB ALU8 start ===\");\n        total_tests = 0;\n        errors = 0;\n        test_count = 0;\n        test_pass = 0;\n\n        run_test();\n\n        // ---- SUMMARY ----\n        $display(\"\\n============================================\");\n        $display(\"=============== TEST SUMMARY ===============\");\n        $display(\"Total test cases : %0d\", test_count);\n        $display(\"Passed            : %0d\", test_pass);\n        $display(\"Failed            : %0d\", test_count - test_pass);\n        pass_rate = (test_count == 0) ? 0.0 : (100.0 * test_pass) / test_count;\n        $display(\"Pass rate         : %6.2f %%\", pass_rate);\n        $display(\"============================================\\n\");\n\n        if (errors == 0) begin\n            $display(\"PASS: All tests succeeded.\");\n            $finish;\n        end else begin\n            $display(\"FAIL: %0d errors detected.\", errors);\n            $fatal;\n        end\n    end\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);