var g_data = {"name":"/home/noname/Documents/project_tiny/Ex3/03_verif/DUT/Question6/tb_Question6.sv","src":"`timescale 1ns/1ps\nmodule tb_Question6();\n\nparameter IS_ASC    = 1;      // 1 = Ascending, 0 = Descending\nparameter NUM_ELEM  = 8;\nparameter SIZE_DATA = 8;\n\nint test_count = 0;\nint test_pass  = 0;\n\nlogic i_clk, i_rst_n;\nlogic [(SIZE_DATA*NUM_ELEM)-1:0]    i_data;\nlogic [(SIZE_DATA*NUM_ELEM)-1:0]    o_data;\n\nfunction automatic logic [SIZE_DATA*NUM_ELEM-1:0] f_ARR_sorted(\n    input  int                                  f_is_acs,\n    input  logic [SIZE_DATA*NUM_ELEM-1:0]       f_i_data\n);\n    logic [SIZE_DATA-1:0] arr [0:NUM_ELEM-1];\n    logic [SIZE_DATA-1:0] temp;\n    int i, j;\n\n    begin\n        for (i = 0; i < NUM_ELEM; i++) begin\n            arr[i] = f_i_data[i*SIZE_DATA +: SIZE_DATA];\n        end\n\n        for (i = 0; i < NUM_ELEM-1; i++) begin\n            for (j = 0; j < NUM_ELEM-1-i; j++) begin\n                if (!f_is_acs) begin\n                    if (arr[j] > arr[j+1]) begin\n                        temp     = arr[j];\n                        arr[j]   = arr[j+1];\n                        arr[j+1] = temp;\n                    end\n                end else begin\n                    if (arr[j] <= arr[j+1]) begin\n                        temp     = arr[j];\n                        arr[j]   = arr[j+1];\n                        arr[j+1] = temp;\n                    end\n                end\n            end\n        end\n\n        for (i = 0; i < NUM_ELEM; i++) begin\n            f_ARR_sorted[i*SIZE_DATA +: SIZE_DATA] = arr[i];\n        end\n    end\nendfunction\n\n\ntask automatic Display_Result(\n    string                               t_type,\n    input logic [SIZE_DATA*NUM_ELEM-1:0] t_arr\n);\n    logic [SIZE_DATA-1:0] t_t_arr   [0:NUM_ELEM-1];\n    int i, j;\n    begin\n        for (i = 0; i < NUM_ELEM; i++) begin\n            t_t_arr[i] = t_arr[i*SIZE_DATA +: SIZE_DATA];\n        end\n\n        for (j = 0; j < NUM_ELEM; j++) begin\n            $display(\"%s[%d] \\t= %8h (%d)\", t_type, j, t_t_arr[j], t_t_arr[j]);\n        end\n    end\nendtask //automatic\n\n//===================== DUT =====================//\n\nBitonic_Sort #(\n        .IS_ASC    (IS_ASC),\n        .NUM_ELEM  (NUM_ELEM),\n        .SIZE_DATA (SIZE_DATA)\n    ) DUT (\n        .i_data    (i_data),\n        .o_sorted  (o_data)\n    );\n\n//===================== CLOCK =====================//\ninitial begin\n    i_clk = 0;\n    forever #5 i_clk = ~i_clk; // 10ns period = 100MHz\nend\n\n//===================== DUMP WAVE =====================//\ninitial begin\n    $dumpfile(\"tb_Question6.vcd\");\n    $dumpvars(0, tb_Question6);\nend\n//===================== TEST SEQUENCE =====================//\ninitial begin\n    i_rst_n = 0;\n    i_data  = '0;\n\n    // Reset phase\n    #20;\n    i_rst_n = 1;\n    #10;\n\n    $display(\"\\n===DESCENDING===\\n\");\n    repeat (1) begin\n        @(posedge i_clk);\n        #1;\n        i_data  = $urandom;\n        i_data = '0;\n        $display(\"\\n\");\n        Display_Result(\"Input\", i_data);\n        @(negedge i_clk);\n        #1;\n        $display(\"\\n\");\n        Display_Result(\"Output\", o_data);\n        $display(\"[TIME: %5t] [%s] i_data = %h (%d) \\t| o_data = %h (%d)\", $time, \"Zero\", i_data, i_data, o_data, o_data);\n        $display(\"=> %4s: Expect: %8h, DUT: %8h \", (f_ARR_sorted(IS_ASC, i_data) == o_data) ? \"PASS\" : \"FAIL\", f_ARR_sorted(IS_ASC, i_data), o_data);\n        test_count = test_count + 1;\n        test_pass  = (f_ARR_sorted(IS_ASC, i_data) == o_data) ? test_pass + 1 : test_pass;\n    end\n\n    repeat (1) begin\n        @(posedge i_clk);\n        #1;\n        i_data  = $urandom;\n        $display(\"\\n\");\n        Display_Result(\"Input\", i_data);\n        @(negedge i_clk);\n        #1;\n        $display(\"\\n\");\n        Display_Result(\"Output\", o_data);\n        $display(\"[TIME: %5t] [%s] i_data = %h (%d) \\t| o_data = %h (%d)\", $time, \"Random\", i_data, i_data, o_data, o_data);\n        $display(\"=> %4s: Expect: %8h, DUT: %8h \", (f_ARR_sorted(IS_ASC, i_data) == o_data) ? \"PASS\" : \"FAIL\", f_ARR_sorted(IS_ASC, i_data), o_data);\n        test_count = test_count + 1;\n        test_pass  = (f_ARR_sorted(IS_ASC, i_data) == o_data) ? test_pass + 1 : test_pass;\n    end\n\n    repeat (100) begin\n        @(posedge i_clk);\n        #1;\n        i_data  = $urandom_range(0, 2**(SIZE_DATA*NUM_ELEM)-1);\n        // $display(\"\\n\");\n        // Display_Result(\"Input\", i_data);\n        @(negedge i_clk);\n        #1;\n        // $display(\"\\n\");\n        // Display_Result(\"Output\", o_data);\n        $display(\"[TIME: %5t] [%s] i_data = %h (%d) \\t| o_data = %h (%d)\", $time, \"Random\", i_data, i_data, o_data, o_data);\n        $display(\"=> %4s: Expect: %8h, DUT: %8h \", (f_ARR_sorted(IS_ASC, i_data) == o_data) ? \"PASS\" : \"FAIL\", f_ARR_sorted(IS_ASC, i_data), o_data);\n        test_count = test_count + 1;\n        test_pass  = (f_ARR_sorted(IS_ASC, i_data) == o_data) ? test_pass + 1 : test_pass;\n    end\n    \n    #10;\n    $display(\"\\n================================\");\n    $display(\"==========TEST SUMMARY==========\");\n    $display(\"Total test cases: %6d    \", test_count);\n    $display(\"Passed          : %6d    \", test_pass);\n    $display(\"Failed          : %6d    \", test_count - test_pass);\n    $display(\"Pass rate       : %0.2f%%\", (test_pass * 100.0) / (test_count));\n    $display(\"================================\");\n    #100;\n\n    $finish;\nend\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);